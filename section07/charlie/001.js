/*
회의실 배정

한 개의 회의실이 있는데 이를 사용하고자 하는 n개의 회의들에 대하여 회의실 사용표를 만들 려고 한다.
각 회의에 대해 시작시간과 끝나는 시간이 주어져 있고, 각 회의가 겹치지 않게 하면서 회의실을 사용할 수 있는 최대수의 회의를 찾아라.
단, 회의는 한번 시작하면 중간에 중단될 수 없으며 한 회의가 끝나는 것과 동시에 다음 회의가 시작될 수 있다.

// 입력설명
첫째 줄에 회의의 수 n(1<=n<=100,000)이 주어진다.
둘째 줄부터 n+1 줄까지 각 회의의 정보가 주어지는데 이것은 공백을 사이에 두고 회의의 시작시간과 끝나는 시간이 주어진다.
회의의 시작시간과 끝나는 시간의 조건은 (시작시간 <= 끝나는 시간)입니다.

// 출력설명
첫째 줄에 최대 사용할 수 있는 회의 수를 출력하여라.

*/

function solution(N, arr) {
	arr.sort((a,b) => {
		if (a[1] === b[1])
			return (a[0] - b[0]);
		else
			return (a[1] - b[1]);
	}) // 회의 종료 시간을 기준으로 정렬 (같다면 일찍 시작하는게 앞)

	let count = 0;
	let endTime = -1;
	for (const time of arr) {
		if (time[0] >= endTime) { // 다음 회의 시간이 현재 끝난 회의시간보다 크면 업데이트
			endTime = time[1];
			count++;
		}
	}
	return count;
}

let numA = 5;
let testA = [[1,4],[2,3],[3,5],[4,6],[5,7]];
//(2,3), (3,5), (5,7)이 회의실을 이용할 수 있다.

let numB = 3;
let testB = [[3,3],[1,3],[2,3]];
//(1,3), (3,3) 혹은 (2,3), (3,3) 회의실 이용 가능

let numC = 10;
let testC = [[2,10],[3,5],[4,8],[7,15],[1,5],[6,8],[10,11],[11,15],[5,7],[9,12]];
//(1,5),(6,8),(10,11),(11,15) 등

let numD = 7;
let testD = [[4,6],[2,4],[3,5],[2,6],[4,5],[5,7],[1,4]];
//(1,4), (4,5), (5,7) 혹은 (2,4), (4,5), (5,7)

let numE = 7;
let testE = [[2,2],[3,3],[1,3],[2,3],[5,7],[6,7],[3,6]];
//(2,2), (2,3), (3,3), (3,6), (6,7)

console.log(solution(numA, testA)); // 3
console.log(solution(numB, testB)); // 2
console.log(solution(numC, testC)); // 4
console.log(solution(numD, testD)); // 3
console.log(solution(numE, testE)); // 5