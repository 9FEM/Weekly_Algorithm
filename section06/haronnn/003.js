/*

게임개발자인 "죠르디"는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다.
"죠르디"는 게임의 재미를 높이기 위해 화면 구성과 규칙을 다음과 같이 게임 로직에 반영하려고 합니다.

게임 화면은 "1 x 1" 크기의 칸들로 이루어진 "N x N" 크기의 정사각 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다. (위 그림은 "5 x 5" 크기의 예시입니다). 각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다. 모든 인형은 "1 x 1" 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터 차곡차곡 쌓여 있습니다. 게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다. 집어 올린 인형은 바구니에 쌓이게 되는 데, 이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다. 다음 그림은 [1번, 5번, 3번] 위치에서 순서대로 인형을 집어 올려 바구니에 담은 모습입니다.

만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다. 위 상태에서 이어서 [5번] 위치에서 인형을 집어 바구니에 쌓으면 같은 모양 인형 두 개가 없어집니다.

크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도 일어나지 않습니다. 또한 바구니는 모든 인형이 들어갈 수 있을 만큼 충분히 크다고 가정합니다. (그림에서는 화면표시 제약으로 5칸만으로 표현하였음)

게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때, 크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return 하도록 solution 함수를 완성해주세요.

[제한사항]
board 배열은 2차원 배열로 크기는 "5 x 5" 이상 "30 x 30" 이하입니다.
board의 각 칸에는 0 이상 100 이하인 정수가 담겨있습니다.
0은 빈 칸을 나타냅니다.
1 ~ 100의 각 숫자는 각기 다른 인형의 모양을 의미하며 같은 숫자는 같은 모양의 인형을 나타냅니다.
moves 배열의 크기는 1 이상 1,000 이하입니다.
moves 배열 각 원소들의 값은 1 이상이며 board 배열의 가로 크기 이하인 자연수입니다.

--> Programmers 에서 풀이
 // https://school.programmers.co.kr/learn/courses/30/lessons/64061

*/

// moves의 i도 필요함. element는 moves[i] -1 로.
// board의 i는 2차원배열의 moves요소번째여야함.
// 뽑아주는 걸 함수로 따로 작성하는게 좋을지? 고려해야할 부분이 많으니까. 일단 이중반복문으로.

function solution(board, moves) {
  let basket = []; // 바구니
  let count = 0; // 인형 몇개 터졌는지

  // moves 길이만큼 순회
  for (let i = 0; i < moves.length; i++) {
    let el = moves[i] - 1; // moves의 element. 1번째를 0번째로

    // board 순회
    for (let j = 0; j < board.length; j++) {
      // 예시: board의 0번째 0번째가 0이 아니라면
      if (board[j][el] !== 0) {
        // basket 마지막 요소와, 넣은 요소가 같은지 비교하기
        if (basket[basket.length - 1] === board[j][el]) {
          // 같다면 빼버리기
          basket.pop();
          // 그리고 인형 2개가 터졌기에 +2
          count += 2;
        } else {
          // 같지 않으면 바구니에 쌓아주기
          basket.push(board[j][el]);
        }
        // 빼간 요소는 0이 되어야함.
        board[j][el] = 0;
        // 찰리님이 얘기했던 반복문 종료 넣어주기.
        break;
      }
    }
  }
  // 인형이 몇개터진건지 return
  return count;
}

const board = [
  [0, 0, 0, 0, 0],
  [0, 0, 1, 0, 3],
  [0, 2, 5, 0, 1],
  [4, 2, 4, 4, 2],
  [3, 5, 1, 3, 1],
];
const moves = [1, 5, 3, 5, 1, 2, 1, 4];
console.log(solution(board, moves)); // 사라진 인형 4개 (2번 터짐)

//* 생각하기
// 1. moves의 요소에 -1을 해줘야 맞는 위치를 찾을 것임. 0, 1, 2, 3, 4
// 2. board에서 인형을 뽑은 경우에 그 위치의 값을 0으로 바꿔줘야함.

// TODO
// 1. moves의 0번째 요소가 1이면 2차원 배열의 0번째들을 순회해야함 (생각하기의 1번 -1로 해결)
// 2. 0번째들의 요소가 0일 경우는 넘어가고 숫자가 있으면(if) 가져와야하는데
// 3. 2번 if안에서 => 바구니 (basket)에 먼저 들어간 요소와 지금 들어간 요소가 같으면(if) 제거(pop)하고 count +2(인형 2개)해야함 그게아니라면(else) 그냥 push
// 4. push해서 빼준 자리를 0으로 바꿔주기
// 5. 다 하고나면 break가 있어야함!
