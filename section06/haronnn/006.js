/*

정보 왕국의 이웃 나라 외동딸 공주가 숲속의 괴물에게 잡혀갔습니다.
정보 왕국에는 왕자가 N명이 있는데 서로 공주를 구하러 가겠다고 합니다. 정보왕국의 왕은 다음과 같은 방법으로 공주를 구하러 갈 왕자를 결정하기로 했습니다.
왕은 왕자들을 나이 순으로 1번부터 N번까지 차례로 번호를 매긴다. 그리고 1번 왕자부터 N 번 왕자까지 순서대로 시계 방향으로 돌아가며 동그랗게 앉게 한다. 그리고 1번 왕자부터 시 계방향으로 돌아가며 1부터 시작하여 번호를 외치게 한다. 한 왕자가 K(특정숫자)를 외치면 그 왕자는 공주를 구하러 가는데서 제외되고 원 밖으로 나오게 된다. 그리고 다음 왕자부터 다시 1부터 시작하여 번호를 외친다.
이렇게 해서 마지막까지 남은 왕자가 공주를 구하러 갈 수 있다.

예를 들어 총 8명의 왕자가 있고, 3을 외친 왕자가 제외된다고 하자. 처음에는 3번 왕자가 3 을 외쳐 제외된다. 이어 6, 1, 5, 2, 8, 4번 왕자가 차례대로 제외되고 마지막까지 남게 된 7 번 왕자에게 공주를 구하러갑니다.
N과 K가 주어질 때 공주를 구하러 갈 왕자의 번호를 출력하는 프로그램을 작성하시오.

// 입력 설명
첫 줄에 자연수 N(5<=N<=1,000)과 K(2<=K<=9)가 주어진다.

// 출력 설명
첫 줄에 마지막 남은 왕자의 번호를 출력합니다.

*/

function solution(N, K) {
  // 1부터 N까지 나열된 배열로 만들기
  let princes = Array.from({ length: N }, (_, i) => i + 1);
  let count = 0;

  // 한명 남을 때까지 돌리기
  while (princes.length > 1) {
    count = (count + K - 1) % princes.length; // 배열의 길이로 나눈 나머지를 계산해서, k번째 왕자 인덱스 구하기
    princes.splice(count, 1); // count 번째인 왕자를 탈락
  }

  return princes[0];
}

const N = 8;
const K = 3;
console.log(solution(N, K)); // 7

// 1. 왕자들을 배열에 나열해야함. 인자가 8이면 1부터 8까지
// 2. i번째 왕자가 k를 외치면 탈락시켜야함
// 3. 다시 그다음 왕자부터는 1부터 시작이어야함.

//* 조세퍼스 문제(Josephus Problem)라고 한다.
//* 원형 연결 리스트로 구현하는 것이 좋다고하지만, % 연산자의 특성을 이용함. (count+K-1) % princes.length를 사용하면은 princes의 길이보다 count값이 커지면 다시 0부터 시작하는 효과를 줄 수가 있음.
