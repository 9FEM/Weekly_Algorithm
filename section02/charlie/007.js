/*
지도 정보가 N*N 격자판에 주어집니다. 각 격자에는 그 지역의 높이가 쓰여있습니다. 각 격자 판의 숫자 중 자신의 상하좌우 숫자보다 큰 숫자는 봉우리 지역입니다. 봉우리 지역이 몇 개 있는 지 알아내는 프로그램을 작성하세요.
격자의 가장자리는 0으로 초기화 되었다고 가정한다.
만약 N=5 이고, 격자판의 숫자가 다음과 같다면 봉우리의 개수는 10개입니다.

// 첫 줄에 자연수 N이 주어진다.(1<=N<=50)
// 두 번째 줄부터 N줄에 걸쳐 각 줄에 N개의 자연수가 주어진다. 각 자연수는 100을 넘지 않는다.

// 봉우리의 개수를 출력하세요.

*/

function solution(map) {
	let count = 0;

	for (let i = 0; i < map.length; i++) {
		for (let j = 0; j < map.length; j++) {
			if (i > 0 && map[i][j] <= map[i - 1][j])  // 상
				continue;
			if (i + 1 < map.length && map[i][j] <= map[i + 1][j])  // 하
					continue;
			if (j > 0 && map[i][j] <= map[i][j - 1])  // 좌
				continue;
			if (j + 1 < map.length && map[i][j] <= map[i][j + 1])  // 우
				continue;
			count += 1;
		}
	}
	return count;
}


const mapA = 
[[5, 3, 7, 2, 3], 
[3, 7, 1, 6, 1], 
[7, 2, 5, 3, 4], 
[4, 3, 6, 4, 1], 
[8, 7, 3, 5, 2]];
console.log(solution(mapA)); // 10

const mapB = 
[[1, 2, 3, 4, 5], 
[5, 4, 3, 2, 1], 
[1, 2, 3, 4, 5], 
[5, 4, 3, 2, 1], 
[1, 2, 3, 4, 5]];
console.log(solution(mapB)); // 5

const mapC = 
[[10, 10, 10, 10, 10], 
[10, 10, 10, 10, 10],
[10, 10, 10, 10, 10],
[10, 10, 10, 10, 10],
[10, 10, 10, 10, 10]];
console.log(solution(mapC)); // 0

const mapD = 
[[20, 10, 20, 10, 20], 
[10, 20, 10, 20, 10],
[20, 10, 20, 10, 20],
[10, 20, 10, 20, 10],
[20, 10, 20, 10, 20]];
console.log(solution(mapD)); // 13

/*
이 또한 완전탐색이 정답일 것 같은데,
다른 방법은 없을까
*/